// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –∏–∑ .env —Ñ–∞–π–ª–∞
import 'dotenv/config'
import { Telegraf } from 'telegraf'
import LocalSession from 'telegraf-session-local'
import io from '@pm2/io'

// –≤–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
// –≤–∫–ª—é—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
io.init({ transactions: true, http: true })

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
import { initCronJobs } from '#src/modules/cron'
import { handleRegComment } from '#src/modules/reg'
import { payments } from '#src/modules/payments'
import { handleTextCommand } from '#src/modules/text'
// import { pingService } from '#src/modules/pingService';
import {
  handleHelpCommand,
  handleDocsCommand,
  handleOperatorCommand
} from '#src/modules/help'
import { oplataNotification } from '#src/modules/oplata'
import { notifyUsers, notifyAllUsers } from '#src/modules/notify'
import { handleStatusCommand, handleMsgCommand } from '#src/utils/admin'
import { logNewChatMembers, logLeftChatMember } from '#src/utils/log'
import { handleGetGroupInfoCommand } from '#src/utils/csv'
import { runBot } from '#src/modules/runBot'
import { handleForwardedMessage, whoCommand } from '#src/modules/who'
import { createMetric } from '#src/utils/metricPM2'
import {
  metricsNotificationDirector,
  formatMetricsMessageMaster,
  sendMetricsMessagesNach
} from '#src/modules/metrics'
import { handlePhoto } from '#src/modules/photo'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const { BOT_TOKEN } = process.env

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraf –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
const localSession = new LocalSession({ database: 'session_db.json' })
bot.use(localSession.middleware())

// –°–µ—Å—Å–∏–æ–Ω–Ω—ã–π middleware
bot.use((ctx, next) => {
  ctx.session = ctx.session || {
    isAwaitFio: false,
    isAwaitComment: false,
    isUserInitiated: false
  }
  return next()
})

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
global.SECRET_KEY = process.env.SECRET_KEY
global.WEB_API = process.env.WEB_API

global.GRAND_ADMIN = process.env.GRAND_ADMIN
global.LOG_CHANNEL_ID = process.env.LOG_CHANNEL_ID

global.DIR_OPLATA = process.env.DIR_OPLATA
global.DIR_METRIC = process.env.DIR_METRIC
global.KISELEV = process.env.KISELEV

global.DIR_TEST_GROUP = process.env.DIR_TEST_GROUP
global.ADMIN_DB = process.env.ADMIN_DB

global.OPLATA_REPORT_ACTIVE = process.env.OPLATA_REPORT_ACTIVE // OPLATA_REPORT_ACTIVE = true;
global.METRICS_REPORT_ACTIVE = process.env.METRICS_REPORT_ACTIVE // METRICS_REPORT_ACTIVE = true;

global.MODE = process.env.NODE_ENV || 'development' // –ï—Å–ª–∏ NODE_ENV –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'development'
global.emoji = {
  x: '&#10060;',
  ok: '&#9989;',
  error: '&#10071;',
  warning: '&#x26A0;',
  bot: '&#129302;',
  star: '&#11088;',
  tech: '&#9881;',
  rating_1: 'ü•á',
  rating_2: 'ü•à',
  rating_3: 'ü•â',
  point: '&#183;'
  // point: '&#8226;', // ‚Ä¢
  // min_point: '&#183;', // ¬∑
} // ‚ùå //‚úÖ //‚ùó //‚ö† //ü§ñ //‚≠ê //‚öôÔ∏è // ü•á // ü•à // ü•â // ‚Ä¢ // ¬∑

global.bot = bot
global.stateCounter = {
  bot_update: 0,
  bot_check: 0,

  user_get_all: 0,
  users_get: 0,
  users_get_all_fio: 0,
  users_add: 0,

  comment_get_all: 0,
  comment_update: 0,

  oplata_get_all: 0,
  oplata_update: 0,

  instanceNumber: 0 // –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏
}

module.exports = { stateCounter }

// –°–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const instanceNumber = Math.floor(Math.random() * 9000) + 1000
const currentDateTime = new Date()
stateCounter.instanceNumber = instanceNumber // –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏

bot.use((ctx, next) => {
  if (ctx.message) {
    if (ctx.message.forward_from) {
      handleForwardedMessage(ctx, ctx.message.forward_from.id) // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏ sender —Ä–∞–∑—Ä–µ—à–∏–ª —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
      return
    }
    if (ctx.message.forward_sender_name) {
      handleForwardedMessage(ctx, ctx.message.forward_sender_name) // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ, –Ω–æ sender –∑–∞–ø—Ä–µ—Ç–∏–ª —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
      return
    }
  }
  return next() // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—ã, –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–µ–º—É middleware
})

runBot(instanceNumber, currentDateTime)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
bot.on('photo', (ctx) => handlePhoto(ctx))

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command(['start', 'reg'], (ctx) =>
  handleRegComment(ctx, (ctx.session.isAwaitFio = true))
) // ['start', 'reg']
bot.command('pay', (ctx) => payments(ctx)) // ['start', 'reg']
bot.command('new_comment', (ctx) =>
  notifyUsers(ctx, (ctx.session.isUserInitiated = true))
)
bot.command('new_comment_all', notifyAllUsers)
bot.command('help', handleHelpCommand)
bot.command('oplata', oplataNotification)
bot.command('msg', handleMsgCommand)
bot.command('status', (ctx) =>
  handleStatusCommand(ctx, instanceNumber, currentDateTime)
)
bot.command('get_group_info', (ctx) => handleGetGroupInfoCommand(ctx))
bot.command('who', (ctx) => whoCommand(ctx))
bot.command(['m', 'metrics'], (ctx) => metricsNotificationDirector(ctx, 1))
bot.command('metrics_director_notification', (ctx) =>
  metricsNotificationDirector(ctx, 0)
)
bot.command('metrics_nachalnic_notification', () => sendMetricsMessagesNach())
bot.command('metrics_master_notification', () => formatMetricsMessageMaster())
// bot.command('metrics_2', (ctx) => metricsNotificationProiz(ctx, 0))
// bot.command('metrics_old', metricsNotification)
bot.command('docs', (ctx) => handleDocsCommand(ctx))
bot.command('oper', (ctx) => handleOperatorCommand(ctx))

// bot.command('ping_test', pingService);

bot.on('message', (ctx) => handleTextCommand(ctx))
bot.on('text', (ctx) => handleTextCommand(ctx)) // –æ—Å–æ–±–æ –Ω–µ –Ω—É–∂–Ω–∞ –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('new_chat_members', logNewChatMembers)
bot.on('left_chat_member', logLeftChatMember)

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().catch((err) => {
  console.error('Fatal Error! Error while launching the bot:', err)
  setTimeout(() => bot.launch(), 30000) // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
})

createMetric('bot_check', stateCounter, 'bot_check')
createMetric('user_get_all', stateCounter, 'user_get_all')
createMetric('users_get_all_fio', stateCounter, 'users_get_all_fio')
createMetric('user_add', stateCounter, 'user_add')
createMetric('users_get', stateCounter, 'users_get')
createMetric('comment_get_all', stateCounter, 'comment_get_all')
createMetric('comment_update', stateCounter, 'comment_update')
createMetric('oplata_get_all', stateCounter, 'oplata_get_all')
createMetric('oplata_update', stateCounter, 'oplata_update')
createMetric('instanceNumber', stateCounter, 'instanceNumber')

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cron-–∑–∞–¥–∞–Ω–∏–π
initCronJobs(currentDateTime, instanceNumber)
