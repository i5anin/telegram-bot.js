// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –∏–∑ .env —Ñ–∞–π–ª–∞
require('dotenv').config()
const { Telegraf } = require('telegraf')
const LocalSession = require('telegraf-session-local')
const io = require('@pm2/io')
const puppeteer = require('puppeteer')

// –≤–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
// –≤–∫–ª—é—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
io.init({ transactions: true, http: true })

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const { initCronJobs } = require('#src/modules/cron')
const { handleRegComment } = require('#src/modules/reg')
const { payments } = require('#src/modules/payments')
const { handleTextCommand } = require('#src/modules/text')
// const { pingService } = require('#src/modules/pingService')
const { handleDocsCommand } = require('#src/modules/links/docs/docs')
const { handleHelpCommand } = require('#src/modules/help/help')
const { handleOperatorCommand } = require('#src/modules/links/oper/oper')
const { tableMetrics } = require('#src/modules/metrics/metrics_btn')
const { oplataNotification } = require('#src/modules/oplata')
const { notifyUsers, notifyAllUsers } = require('#src/modules/notify')
const { handleStatusCommand, handleMsgCommand } = require('#src/utils/admin')
const { logNewChatMembers, logLeftChatMember } = require('#src/utils/log')
const { handleGetGroupInfoCommand } = require('#src/utils/csv')
const { runBot } = require('#src/modules/runBot')
const { handleForwardedMessage, whoCommand } = require('#src/modules/who')
const { createMetric } = require('#src/utils/metricPM2')
const {
  metricsNotificationDirector,
  formatMetricsMessageMaster,
  sendMetricsMessagesNach
} = require('#src/modules/metrics/director/metrics')
const { handlePhoto } = require('#src/modules/photo')
const { checkingGroup } = require('#src/modules/checkingGroup/checkingGroup')
const { sendLogData } = require('#src/api/index')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const { BOT_TOKEN } = process.env

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraf –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
const localSession = new LocalSession({ database: 'session_db.json' })
bot.use(localSession.middleware())

// –°–µ—Å—Å–∏–æ–Ω–Ω—ã–π middleware
bot.use((ctx, next) => {
  ctx.session = ctx.session || {
    isAwaitFio: false,
    isAwaitComment: false,
    isUserInitiated: false
  }
  return next()
})

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
global.SECRET_KEY = process.env.SECRET_KEY
global.WEB_API = process.env.WEB_API

global.GRAND_ADMIN = process.env.GRAND_ADMIN
global.LOG_CHANNEL_ID = process.env.LOG_CHANNEL_ID

global.DIR_OPLATA = process.env.DIR_OPLATA
global.DIR_METRIC = process.env.DIR_METRIC
global.KISELEV = process.env.KISELEV

global.DIR_TEST_GROUP = process.env.DIR_TEST_GROUP
global.ADMIN_DB = process.env.ADMIN_DB

global.OPLATA_REPORT_ACTIVE = process.env.OPLATA_REPORT_ACTIVE // OPLATA_REPORT_ACTIVE = true;
global.METRICS_REPORT_ACTIVE = process.env.METRICS_REPORT_ACTIVE // METRICS_REPORT_ACTIVE = true;

global.MODE = process.env.NODE_ENV || 'development' // –ï—Å–ª–∏ NODE_ENV –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'development'
global.emoji = {
  x: '&#10060;',
  ok: '&#9989;',
  error: '&#10071;',
  warning: '&#x26A0;',
  bot: '&#129302;',
  star: '&#11088;',
  tech: '&#9881;',
  rating_1: 'ü•á',
  rating_2: 'ü•à',
  rating_3: 'ü•â',
  point: '&#183;'
  // point: '&#8226;', // ‚Ä¢
  // min_point: '&#183;', // ¬∑
} // ‚ùå //‚úÖ //‚ùó //‚ö† //ü§ñ //‚≠ê //‚öôÔ∏è // ü•á // ü•à // ü•â // ‚Ä¢ // ¬∑

global.bot = bot
global.stateCounter = {
  bot_update: 0,
  bot_check: 0,

  user_get_all: 0,
  users_get: 0,
  users_get_all_fio: 0,
  users_add: 0,

  comment_get_all: 0,
  comment_update: 0,

  oplata_get_all: 0,
  oplata_update: 0,

  instanceNumber: 0 // –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏
}

module.exports = { stateCounter }

// –°–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const instanceNumber = Math.floor(Math.random() * 9000) + 1000
const currentDateTime = new Date()
stateCounter.instanceNumber = instanceNumber // –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏

// bot.on('message', (ctx) => {
//   console.log('message')
//   // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ
//   const chatId = ctx.chat.id
//
//   // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
//   fetch(
//     `https://api.telegram.org/bot${BOT_TOKEN}/getChatMembersCount?chat_id=${chatId}`
//   )
//     .then((response) => response.json())
//     .then((data) => {
//       if (data.ok) {
//         const count = data.result
//
//         // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
//         fetch(
//           `https://api.telegram.org/bot${BOT_TOKEN}/getChat?chat_id=${chatId}`
//         )
//           .then((response) => response.json())
//           .then((data) => {
//             if (data.ok) {
//               const title = data.result.title
//               console.log(
//                 `–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: ${title}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${count}`
//               )
//             } else {
//               console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã', data)
//             }
//           })
//           .catch((error) => {
//             console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error)
//           })
//       } else {
//         console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', data)
//       }
//     })
//     .catch((error) => {
//       console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error)
//     })
//
//   // –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ
//   handleTextCommand(ctx)
// })

bot.use((ctx, next) => {
  if (ctx.message) {
    if (ctx.message.forward_from) {
      handleForwardedMessage(ctx, ctx.message.forward_from.id) // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏ sender —Ä–∞–∑—Ä–µ—à–∏–ª —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
      return
    }
    if (ctx.message.forward_sender_name) {
      handleForwardedMessage(ctx, ctx.message.forward_sender_name) // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ, –Ω–æ sender –∑–∞–ø—Ä–µ—Ç–∏–ª —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
      return
    }
  }
  return next() // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—ã, –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–µ–º—É middleware
})

runBot(instanceNumber, currentDateTime)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
bot.on('photo', (ctx) => handlePhoto(ctx))

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command(['start', 'reg'], (ctx) =>
  handleRegComment(ctx, (ctx.session.isAwaitFio = true))
) // ['start', 'reg']
bot.command('pay', (ctx) => payments(ctx))

// bot.command('pay', (ctx) => onMaintenance(ctx))
bot.command('new_comment', (ctx) =>
  notifyUsers(ctx, (ctx.session.isUserInitiated = true))
)
bot.command('new_comment_all', notifyAllUsers)
bot.command('help', handleHelpCommand)
bot.command('oplata', oplataNotification)
bot.command('msg', handleMsgCommand)
bot.command('status', (ctx) =>
  handleStatusCommand(ctx, instanceNumber, currentDateTime)
)
bot.command('get_group_info', (ctx) => handleGetGroupInfoCommand(ctx))
bot.command('who', (ctx) => whoCommand(ctx))
bot.command(['m', 'metrics'], (ctx) => metricsNotificationDirector(ctx, 1))
bot.command('metrics_director_notification', (ctx) =>
  metricsNotificationDirector(ctx, 0)
)
bot.command('metrics_nachalnic_notification', () => sendMetricsMessagesNach())
bot.command('metrics_master_notification', () => formatMetricsMessageMaster())
// bot.command('metrics_2', (ctx) => metricsNotificationProiz(ctx, 0))
// bot.command('metrics_old', metricsNotification)
bot.command('docs', (ctx) => handleDocsCommand(ctx))
bot.command('oper', (ctx) => handleOperatorCommand(ctx))

bot.command('list', (ctx) => {
  const searchTerm = ctx.message.text.split(' ')[1]
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  if (!searchTerm) {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /list')
    return
  }

  fetch(`${WEB_API}/users/find_list.php?search_term=${searchTerm}`)
    .then((response) => response.json())
    .then((data) => {
      if (data.status === 'OK') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        const users = data.data
        if (users.length === 0) {
          ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        } else {
          // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 50
          const chunks = chunkArray(users, 50)

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
          chunks.forEach((chunk, index) => {
            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            let message = `–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—á–∞—Å—Ç—å ${index + 1}):\n`
            chunk.forEach((user) => {
              message += `\n<a href='tg://user?id=${user.user_id}'>${user.fio}</a> ${user.username ? `(@${user.username})` : ''} - ${user.post}`
            })

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            ctx.reply(message, { parse_mode: 'HTML' })
          })
        }
      } else {
        ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞.')
      }
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error)
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    })
})

bot.command('list_test_otk_marh', (ctx) => checkingGroup(ctx))

bot.command('get_website_screenshot', async (ctx) => {
  try {
    const websiteUrl = ctx.message.text.split(' ')[1] // –ü–æ–ª—É—á–∞–µ–º URL —Å–∞–π—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!websiteUrl) {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /get_website_screenshot')
      return
    }

    const browser = await puppeteer.launch() // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    const page = await browser.newPage() // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
    await page.goto(websiteUrl) // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
    await page.setViewport({ width: 1920, height: 1080 }) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    const screenshot = await page.screenshot({ type: 'png', fullPage: true }) // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await browser.close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä

    await ctx.replyWithPhoto({ source: screenshot }) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error)
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
})

bot.command('mbth', async (ctx) => tableMetrics(ctx))

bot.command('mjpg', async (ctx) => {
  try {
    const websiteUrl = `${WEB_API}metrics/web.php?key=SecretKeyPFForum23`

    const browser = await puppeteer.launch() // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    const page = await browser.newPage() // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
    await page.goto(websiteUrl) // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
    await page.setViewport({ width: 438, height: 667 }) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    console.log('before waiting')
    await delay(4000) // –û–∂–∏–¥–∞–Ω–∏–µ 4 —Å–µ–∫—É–Ω–¥
    console.log('after waiting')
    const screenshot = await page.screenshot({ type: 'png', fullPage: true }) // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await browser.close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä

    await ctx.replyWithPhoto({ source: screenshot }) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error)
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ —á–∞—Å—Ç–∏
function chunkArray(array, chunkSize) {
  const result = []
  for (let i = 0; i < array.length; i += chunkSize) {
    result.push(array.slice(i, i + chunkSize))
  }
  return result
}

function onMaintenance(ctx) {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
  ctx.reply('‚ùå –§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ.')
}

// bot.command('ping_test', pingService);

bot.on('message', (ctx) => handleTextCommand(ctx))
bot.on('text', (ctx) => handleTextCommand(ctx)) // –æ—Å–æ–±–æ –Ω–µ –Ω—É–∂–Ω–∞ –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('new_chat_members', logNewChatMembers)
bot.on('left_chat_member', logLeftChatMember)

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().catch(async (err) => {
  console.error('Fatal Error! Error while launching the bot:', err)
  const logMessageToSend = {
    user_id: '',
    text: err.toString(),
    error: 1,
    ok: 0,
    test: process.env.NODE_ENV === 'build' ? 0 : 1
  }
  await sendLogData(logMessageToSend)
  setTimeout(() => bot.launch(), 30000) // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
})

createMetric('bot_check', stateCounter, 'bot_check')
createMetric('user_get_all', stateCounter, 'user_get_all')
createMetric('users_get_all_fio', stateCounter, 'users_get_all_fio')
createMetric('user_add', stateCounter, 'user_add')
createMetric('users_get', stateCounter, 'users_get')
createMetric('comment_get_all', stateCounter, 'comment_get_all')
createMetric('comment_update', stateCounter, 'comment_update')
createMetric('oplata_get_all', stateCounter, 'oplata_get_all')
createMetric('oplata_update', stateCounter, 'oplata_update')
createMetric('instanceNumber', stateCounter, 'instanceNumber')

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cron-–∑–∞–¥–∞–Ω–∏–π
initCronJobs(currentDateTime, instanceNumber)
