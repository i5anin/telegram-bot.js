// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –∏–∑ .env —Ñ–∞–π–ª–∞
require('dotenv').config()
const fs = require('fs')
const { Telegraf } = require('telegraf')
const LocalSession = require('telegraf-session-local')

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const axios = require('axios')
const { initCronJobs } = require('#src/modules/cron')
const { handleRegComment } = require('#src/modules/reg')
const { handleTextCommand } = require('#src/modules/text')
const { handleHelpCommand } = require('#src/modules/help')
const { oplataNotification } = require('#src/modules/oplata')
const { notifyUsers, notifyAllUsers } = require('#src/modules/notify')
const { handleStatusCommand, handleMsgCommand } = require('#src/utils/admin')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const { BOT_TOKEN } = process.env

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraf –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
const localSession = new LocalSession({ database: 'session_db.json' })
bot.use(localSession.middleware())

// –°–µ—Å—Å–∏–æ–Ω–Ω—ã–π middleware
bot.use((ctx, next) => {
    ctx.session = ctx.session || {
        isAwaitFio: false,
        isAwaitComment: false,
        userInitiated: false,
    }
    return next()
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–æ–≤ —Å–µ—Å—Å–∏–∏
function resetFlags(ctx) {
    ctx.session.isAwaitFio = false
    ctx.session.isAwaitComment = false
    ctx.session.userInitiated = false
}


// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
global.WEB_API = 'https://bot.pf-forum.ru/api'
global.GRAND_ADMIN = process.env.GRAND_ADMIN
global.LOG_CHANNEL_ID = process.env.LOG_CHANNEL_ID
global.SECRET_KEY = process.env.SECRET_KEY
global.DIR_OPLATA = process.env.DIR_OPLATA
global.OPLATA_GROUP = process.env.OPLATA_GROUP
global.emoji = {
    x: '&#10060;', //‚ùå
    ok: '&#9989;', //‚úÖ
    error: '&#10071;', //‚ùó
    warning: '&#x26A0;', //‚ö†Ô∏è
}
global.bot = bot
global.stateCounter = {
    my: 0,
    message: 0,
    cronMessage: 0,
}


// –°–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
const instanceNumber = Math.floor(Math.random() * 9000) + 1000
console.log('! –ù–æ–º–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ : ' + instanceNumber)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command(['start', 'reg'], async (ctx) => {
    resetFlags(ctx)
    await handleRegComment(ctx, ctx.session.isAwaitFio = true)
})

bot.command('new_comment', async (ctx) => {
    resetFlags(ctx)
    await notifyUsers(ctx)
})
bot.command('new_comment_all', async (ctx) => {
    resetFlags(ctx)
    await notifyAllUsers(ctx)
})

bot.command('help', handleHelpCommand)

bot.command('oplata', oplataNotification)

bot.command('msg', async (ctx) => handleMsgCommand(ctx))
bot.command('status', (ctx) => handleStatusCommand(ctx, instanceNumber))

const getExternalUsers = async () => {
    try {
        const response = await axios.get(WEB_API + '/users/get_all_fio.php')
        return response.data.users_data
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –≤–Ω–µ—à–Ω–µ–≥–æ API:', error)
        return []
    }
}

async function generateReport(ctx, chatId) {
    // –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è CSV –æ—Ç—á–µ—Ç–∞
    const csvReport = ['username;id;firstname;lastname;fio;status']

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –≤–Ω–µ—à–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    const chatInfo = await ctx.telegram.getChat(chatId)
    const chatMembersCount = await ctx.telegram.getChatMembersCount(chatId)
    const externalUsers = await getExternalUsers()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
    await bot.telegram.sendMessage(LOG_CHANNEL_ID, `–û—Ç—á–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã <code>${chatInfo.title}</code>\nID: <code>${chatId}</code>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>${chatMembersCount}</code>`, { parse_mode: 'HTML' })

    let absentCounter = 0

    // –û–±—Ö–æ–¥–∏–º –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const user of externalUsers) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
            const telegramUser = await ctx.telegram.getChatMember(chatId, user.user_id)
            const status = telegramUser.status  // –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            const username = telegramUser.user.username ? '@' + telegramUser.user.username : 'N/A'

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ CSV –æ—Ç—á–µ—Ç
            const userInfoCsv = `${telegramUser.user.username || 'N/A'};${telegramUser.user.id};${telegramUser.user.first_name};${telegramUser.user.last_name || 'N/A'};${user.fio};${status}`
            csvReport.push(userInfoCsv)


        } catch (error) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —á–∞—Ç–µ
            absentCounter++

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ CSV –æ—Ç—á–µ—Ç
            const userInfoCsv = `N/A;${user.user_id};N/A;N/A;${user.fio};left`  // –°—Ç–∞—Ç—É—Å 'left'
            csvReport.push(userInfoCsv)
        }
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV –æ—Ç—á–µ—Ç—ã
    fs.writeFileSync(`${chatInfo.title}_report.csv`, csvReport.join('\n'))
}


bot.command('get_group_info', async (ctx) => {
    if (ctx.from.id.toString() !== GRAND_ADMIN) {
        return ctx.reply('–¢–æ–ª—å–∫–æ GRAND_ADMIN –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.')
    }

    const input = ctx.message.text.split(' ')

    if (input.length !== 2) {
        return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_group_info [chat_id]')
    }

    const chatId = input[1]
    await generateReport(ctx, chatId)
})


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {

    await handleTextCommand(ctx)
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
    .catch((err) => {
        console.error('Fatal Error! Error while launching the bot:', err)
    })

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
bot.on('new_chat_members', async (ctx) => { // —Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log('new_chat_members')
    const chatTitle = ctx.chat.title || '–ù–µ–Ω–∞–∑–≤–∞–Ω–Ω—ã–π —á–∞—Ç'
    const addedUsers = ctx.message.new_chat_members

    for (const user of addedUsers) {
        const username = user.username || 'N/A'
        const fullName = `${user.first_name || ''} ${user.last_name || ''}`.trim()
        const userId = user.id

        const message = `${emoji.ok} –î–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É <code>${chatTitle}</code>\n–ò–º—è: <code>${fullName}</code>\nID: <code>${userId}</code>\nUsername: <code>${username}</code>`
        await ctx.telegram.sendMessage(LOG_CHANNEL_ID, message, { parse_mode: 'HTML' })
    }
})

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
bot.on('left_chat_member', async (ctx) => {
    const chatTitle = ctx.chat.title || '–ù–µ–Ω–∞–∑–≤–∞–Ω–Ω—ã–π —á–∞—Ç'
    const leftMember = ctx.message.left_chat_member

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const username = leftMember.username || 'N/A'
    const fullName = `${leftMember.first_name || ''} ${leftMember.last_name || ''}`.trim()
    const userId = leftMember.id

    const message = `${emoji.x} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É <code>${chatTitle}</code>\n–ò–º—è: <code>${fullName}</code>\nID: <code>${userId}</code>\nUsername: <code>${username}</code>`

    await ctx.telegram.sendMessage(LOG_CHANNEL_ID, message, { parse_mode: 'HTML' })
})

// // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ
// bot.on('channel_post', async (ctx) => {
//     const channelTitle = ctx.chat.title || '–ù–µ–Ω–∞–∑–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª';
//     const messageId = ctx.message.message_id;
//     const text = ctx.message.text || 'N/A';
//     const date = new Date(ctx.message.date * 1000); // –î–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
//
//     const message = `üì¢ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ <code>${channelTitle}</code>\nMessage ID: <code>${messageId}</code>\n–¢–µ–∫—Å—Ç: <code>${text}</code>\n–î–∞—Ç–∞: <code>${date.toISOString()}</code>`;
//     await ctx.telegram.sendMessage(LOG_CHANNEL_ID, message, { parse_mode: 'HTML' });
// });
//
// // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ
// bot.on('edited_channel_post', async (ctx) => {
//     const channelTitle = ctx.chat.title || '–ù–µ–Ω–∞–∑–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª';
//     const messageId = ctx.message.message_id;
//     const editedText = ctx.message.text || 'N/A';
//     const editDate = new Date(ctx.message.edit_date * 1000); // –î–∞—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
//
//     const message = `üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ <code>${channelTitle}</code>\nMessage ID: <code>${messageId}</code>\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: <code>${editedText}</code>\n–î–∞—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <code>${editDate.toISOString()}</code>`;
//     await ctx.telegram.sendMessage(LOG_CHANNEL_ID, message, { parse_mode: 'HTML' });
// });


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cron-–∑–∞–¥–∞–Ω–∏–π
initCronJobs()
