const moment = require('moment/moment')

async function tableMetrics(ctx) {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å API
    const response = await fetch(
        `${WEB_API}/metrics/get.php?key=SecretKeyPFForum23`,
    )
    const data = await response.json()
    const latestMetrics = data.metrics[data.metrics.length - 1] // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    const keyboard = [
        [
            { text: '–î–∞—Ç–∞', callback_data: 'date' },
            {
                text: `${moment(latestMetrics.date, 'YYYY-MM-DD HH:mm:ss').format(
                    'DD.MM.YYYY HH:mm',
                )}`,
                callback_data: 'date_data',
            },
        ],
        [
            { text: '–ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ –ø–æ –ú/–û', callback_data: 'mzp' },
            {
                text: `${formatNumber(latestMetrics.prod_price_mzp)} ‚ÇΩ`,
                callback_data: 'mzp_data',
            },
        ],
        [
            { text: 'C–ª–µ—Å–∞—Ä–∫–∞', callback_data: 'sles' },
            {
                text: `${formatNumber(latestMetrics.prod_price_sles)} ‚ÇΩ ${
                    latestMetrics.prod_price_sles <= 3400000
                        ? 'üü¢'
                        : latestMetrics.prod_price_sles > 3400000
                            ? 'üî¥'
                            : ''
                }`,
                callback_data: 'sles_data',
            },
        ],
        [
            { text: '–û–¢–ö', callback_data: 'otk' },
            {
                text: `${formatNumber(latestMetrics.prod_price_otk)} ‚ÇΩ ${
                    latestMetrics.prod_price_otk <= 1700000
                        ? 'üü¢'
                        : latestMetrics.prod_price_otk > 1700000
                            ? 'üî¥'
                            : ''
                }`,
                callback_data: 'otk_data',
            },
        ],
        [
            { text: '–£–ø–∞–∫–æ–≤–∫–∞', callback_data: 'upk' },
            {
                text: `${formatNumber(latestMetrics.prod_price_upk)} ‚ÇΩ ${
                    latestMetrics.prod_price_upk <= 1700000
                        ? 'üü¢'
                        : latestMetrics.prod_price_upk > 1700000
                            ? 'üî¥'
                            : ''
                }`,
                callback_data: 'upk_data',
            },
        ],
        [
            { text: '–î–æ—Ä–∞–±–æ—Ç–∫–∞ –ß–ü–£', callback_data: 'dorabotka' },
            {
                text: `${formatNumber(latestMetrics.prod_price_dorabotka)} ‚ÇΩ üî¥`,
                callback_data: 'dorabotka_data',
            },
        ],
        [
            { text: '–î–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ—Å.', callback_data: 'dorabotka_sles' },
            {
                text: `${formatNumber(latestMetrics.prod_price_dorabotka_sles)} ‚ÇΩ üî¥`,
                callback_data: 'dorabotka_sles_data',
            },
        ],
        [
            { text: '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ', callback_data: 'sogl' },
            {
                text: `${formatNumber(latestMetrics.prod_price_sogl)} ‚ÇΩ üî¥`,
                callback_data: 'sogl_data',
            },
        ],
        [
            { text: '–ò—Ç–æ–≥–æ –≤–Ω. –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', callback_data: 'prod_price' },
            {
                text: `${formatNumber(latestMetrics.prod_price)} ‚ÇΩ`,
                callback_data: 'prod_price_data',
            },
        ],
        [
            { text: '–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞', callback_data: 'predoplata' },
            {
                text: `${formatNumber(latestMetrics.predoplata)} ‚ÇΩ`,
                callback_data: 'predoplata_data',
            },
        ],
        [
            { text: '–ò—Ç–æ–≥–æ –≤–Ω. –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', callback_data: 'total_price' },
            {
                text: `${formatNumber(latestMetrics.total_price)} ‚ÇΩ (—Å –ù–î–°)`,
                callback_data: 'total_price_data',
            },
        ],
        [
            {
                text: '–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è —Å–∫–ª–∞–¥',
                callback_data: 'total_sklad_gp',
            },
            {
                text: `${formatNumber(latestMetrics.total_sklad_gp)} ‚ÇΩ (—Å –ù–î–°)`,
                callback_data: 'total_sklad_gp_data',
            },
        ],
        [{ text: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∞', callback_data: 'cumulative' }],
        [
            { text: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', callback_data: 'cumulative' },
            {
                text: `${formatPercentage(latestMetrics.cumulative_sklad_month, 2)}%`,
                callback_data: 'cumulative_sklad_month_data',
            },
        ],
        [
            { text: '–ë—Ä–∞–∫', callback_data: 'brak' },
            {
                text: `${formatPercentage(latestMetrics.cumulative_brak_month, 2)}%`,
                callback_data: 'cumulative_brak_month_data',
            },
        ],
        [
            { text: '–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂', callback_data: 'manager' },
            {
                text: `${formatPercentage(latestMetrics.cumulative_manager_month, 2)}%`,
                callback_data: 'cumulative_manager_month_data',
            },
        ],
        [{ text: '–í–æ—Ä–æ–Ω–∫–∞', callback_data: 'voronka' }],
        [
            { text: '‚ñΩ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', callback_data: 'voronka' },
            {
                text: `${formatPercentage(latestMetrics.prod, 2)}%`,
                callback_data: 'prod_data',
            },
        ],
        [
            { text: '‚ñΩ –°–ª–µ—Å–∞—Ä–Ω—ã–π —É—á–∞—Å—Ç–æ–∫', callback_data: 'sles' },
            {
                text: `${formatPercentage(latestMetrics.sles, 2)}%`,
                callback_data: 'sles_data_2',
            },
        ],
        [
            { text: '‚ñΩ –û–¢–ö', callback_data: 'otk' },
            {
                text: `${formatPercentage(latestMetrics.otk, 2)}%`,
                callback_data: 'otk_data_2',
            },
        ],
        [
            { text: '‚ñΩ –£–ø–∞–∫–æ–≤–∫–∞', callback_data: 'upk' },
            {
                text: `${formatPercentage(latestMetrics.upk, 2)}%`,
                callback_data: 'upk_data_2',
            },
        ],
        [
            { text: '–ü—Ä–æ–¥. –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', callback_data: 'productivity_prod' },
            {
                text: `${formatNumber(latestMetrics.productivity_prod)} ‚ÇΩ/—á–∞—Å`,
                callback_data: 'productivity_prod_data',
            },
        ],
        [
            { text: '–ü—Ä–æ–¥. –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', callback_data: 'productivity' },
            {
                text: `${formatNumber(latestMetrics.productivity)} ‚ÇΩ/—á–∞—Å`,
                callback_data: 'productivity_data',
            },
        ],
        [
            { text: '–û—Ç–≥—Ä—É–∑–∫–∞ –ú/–û', callback_data: 'otgr_prod' },
            {
                text: `${formatNumber(latestMetrics.get_sum_otgr_prod)} ‚ÇΩ`,
                callback_data: 'otgr_prod_data',
            },
        ],
        [
            { text: '–û—Ç–≥—Ä—É–∑–∫–∞', callback_data: 'otgr' },
            {
                text: `${formatNumber(latestMetrics.get_sum_otgr)} ‚ÇΩ (—Å –ù–î–°)`,
                callback_data: 'otgr_data',
            },
        ],
    ]

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å:', {
        reply_markup: { inline_keyboard: keyboard },
        parse_mode: 'HTML',
    })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ (—Å —Ç—ã—Å—è—á–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏)
function formatNumber(number) {
    return Math.round(number)
        .toString()
        .replace(/\B(?=(\d{3})+(?!\d))/g, ' ')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (—Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
function formatPercentage(value, decimals) {
    return value.toFixed(decimals)
}

function delay(time) {
    return new Promise(function(resolve) {
        setTimeout(resolve, time)
    })
}

module.exports = {
    tableMetrics,
}
